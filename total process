Step:1

#gcloud commands to create 3 vms for the cluster
gcloud compute instances create master worker-1 worker-2 --create-disk=auto-delete=yes,boot=yes,image=projects/ubuntu-os-cloud/global/images/ubuntu-1804-bionic-v20211115 --zone us-central1-a --machine-type=e2-medium

Step:2
To Create a User in Ubuntu follow the below steps: (Both master and worker)
$ adduser username
#Example
useradd ravi
#Add the new user to the sudo group 
usermod -aG sudo username
#Example
usermod -aG sudo ravi
Switch to newly created user:
su - ravi
#How to Enable SSH Password Authentication
#To enable SSH password authentication, you must SSH in as root to edit this file:
/etc/ssh/sshd_config
PasswordAuthentication yes
sudo service ssh restart

Step:3
install Docker on all nodes (Both master and worker)

link  :  https://docs.docker.com/engine/install/ubuntu/
---------------------------------------create .docker.sh script and give permissions like chmod +x docker.sh -- then sh docker.sh ------------------------------------------------
# Set up the repository
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release -y

# Add Dockerâ€™s official GPG key:
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Use the following command to set up the repository:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine
sudo apt-get update


# To install the latest version, run:
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y


# To install specific version , do refer documentation

sudo apt-mark hold docker-ce
sudo usermod -aG docker username
sudo docker version
rm /etc/containerd/config.toml
systemctl restart containerd
--------------------------------------------------------------------------------


Step:4 (On all nodes, install kubeadm, kubelet, and kubectl. (Both master and worker))

# Update the apt package index and install packages needed to use the Kubernetes apt repository:
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

# Download the Google Cloud public signing key: (https://github.com/LondheShubham153/kubestarter/blob/main/kubeadm_installation.md)
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

#Add the Kubernetes apt repository:
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# If we get errors like GPG error, execute the following command
# curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

 #Update apt package index, install kubelet, kubeadm and kubectl with a specific version, and pin their version:
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl

Step:5    On the Kube master server (Master Only)

# Configure cgroup driver used by kubelet on control-plane.(Only on master node)
	sudo docker info | grep -i cgroup
# below inputs may get eror as well
echo "Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"" >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

systemctl restart kubelet
systemctl daemon-reload

# Initialising the control-plane node run the below command on the (master node)
sudo kubeadm init

# If we get error wrt container runtime not running , execute the below commands
rm /etc/containerd/config.toml
systemctl restart containerd

Step6: #Set up local kubeconfig: only master
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# If you need to generate a new tokem use the below command (Optional Not required , if you have the above token generated)
take below command output from master and run in worker nodes:    
sudo kubeadm token create --print-join-command
example: kubeadm join 10.128.0.20:6443 --token uhffx7.pgjlbyv83meic9ga --discovery-token-ca-cert-hash sha256:3e151769f50faab11623872dc2e5a72a33c508ec9a90efd32066d597e1d7ecbf 

Step7:  Join the Worker nodes (Only on Worker Nodes)
Execute the command that is been generated as the output of the previous command, where we got the token generated. 
It will be similar to the below command
sudo kubeadm join 10.128.0.20:6443 --token uhffx7.pgjlbyv83meic9ga --discovery-token-ca-cert-hash sha256:3e151769f50faab11623872dc2e5a72a33c508ec9a90efd32066d597e1d7ecbf

Step8:
Come back to Master node and executhe below commands (Only on Master Node)

# Verify the cluster status by executing kubectl command on the master node
kubectl get nodes
#Install CNI so that pods can communicate across nodes and also Cluster DNS to start functioning. Apply weave CNI (Container Network Interface) on the master node
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
kubectl get nodes





